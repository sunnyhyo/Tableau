무례한 언행	설명부족	진료시간 지연	병원 환경 및 심야 소음	투약(주사)지연	인수인계누락	전화응대 지연
VOC유형	52.9	14.7	14.7	2.9	2.9	2.9	8.8
a<-data.frame(" 	무례한 언행	설명부족	진료시간 지연	병원 환경 및 심야 소음	투약(주사)지연	인수인계누락	전화응대 지연
VOC유형	52.9	14.7	14.7	2.9	2.9	2.9	8.8
")
a
?data.frame()
a<-read.csv("C:/Users/HS/Desktop/통합 문서.csv")
a<-read.csv("C:/Users/HS/Desktop/통합 문서1.csv")
a<-read.csv("C:/Users/HS/Desktop/통합 문서1.csv")
a
a
a
names(a)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
a
b<- data.frame(x=c("무례한 언행",))
b<- data.frame(x=c("무례한 언행",
"설명부족",
"진료시간 부족",
"병원환경 및 심야소음",))
boaz<- '보아즈 사랑합니다';boaz
which.max(1,2,3)
which.max(c(1,2,3))
fibo= function(n){
for(i in n){
for (j in n ){
print("*"*i)
}
}
}
fibo(5)
fibo= function(n){
for(i in n){
for (j in n ){
print("*")*i
}
}
}
fibo(5)
fibo= function(n){
for(i in n){
for (j in n ){
"*"*i
}
}
}
fibo(5)
fuc_sum = function(x){
a=0
for i in x{
a=a+x[i]
}
return(a)
}
fuc_sum(c(1,2,3))
fuc_sum = function(x){
a=0
for i in x{
a=a+x[i]
}
return(a)
}
fuc_sum(c(1,2,3))
fuc_sum = function(x){
a=0
for i in x{
a=a+x[i]
}
return(a)
}
fuc_sum = function(x){
a=0
for(i in x){
a=a+x[i]
}
return(a)
}
fuc_sum(c(1,2,3))
fuc_sum(c(1,2,3,4))
fuc_max = function(x){
a=x[1]
for(i in x){
if (x[i] > a){
a=x[i]
}
}
}
which.max(c(1,2,3))
fuc_max = function(x){
a=x[1]
for(i in x){
if (x[i] > a){
a=x[i]
}
}
}
which.max(c(1,2,3,4))
fibo = function(x){
fibo1<-1
fibo2<-2
for(i in 3:x){
tmp <-fibo1+fibo2
fibo1<- fibo2
fibo2<- tmp
}
return(fibo2)
}
fibo(10)
fibo = function(x){
fibo1<-1
fibo2<-1
for(i in 3:x){
tmp <-fibo1+fibo2
fibo1<- fibo2
fibo2<- tmp
}
return(fibo2)
}
fibo(10)
fuc = fuction(n){
sum=0
deno=0
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(2)
fuc = function(n){
sum=0
deno=0
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(2)
fuc = function(n){
sum=1
deno=0
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(2)
fuc = function(n){
sum=1
deno=1
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(2)
fuc = function(n){
sum=1
deno=1
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(3)
1+1/3+1/6
fuc = function(n){
sum=1
deno=0
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(3)
fuc = function(n){
sum=0
deno=0
for(i in n){
deno=deno+i
sum=sum+1/deno
}
return(sum)
}
fuc(3)
fuc = function(n){
sum=0
oh=0
for(i in n){
oh=oh+i
ohh=1/(oh)
sum=sum+ohh
}
return(sum)
}
fuc(3)
fuc = function(n){
sum=1
oh=0
for(i in n){
oh=oh+i
print(oh)
}
}
fuc(3)
fuc = function(n){
oh=0
for(i in n){
oh=oh+i
print(oh)
}
}
fuc(3)
fuc = function(n){
oh=0
for(i in 1:n){
oh=oh+i
print(oh)
}
}
fuc(2)
fuc(3)
fuc = function(n){
sum=0
oh=0
for(i in 1:n){
oh=oh+i
a=1/oh
sum=sum+a
}
return(sum)
}
fuc(3)
1+1/3+1/6
for(i in 1:5){
for(j in 1:i){
print('*')
}
print('\n')
}
for(i in 1:5){
for(j in 1:i){
cat('*')
}
cat('\n')
}
?cat()
?print()
bbbb<-read.csv("bbbb.csv",decoding="cp949")
bbbb<-read.csv("bbbb.csv")
load("C:/Users/HS/Desktop/bbbb.csv")
####데이터 불러오기만...
cali <- read.csv("cali.csv")
####데이터 불러오기만...
cali <- read.csv("california.csv")
##R 기초는 생략.... 보아즈카페에 있는 R기초랑 r데이터분석 실무 5장까지 따라쳐보면 금방 된다.'
setwd("C:/Users/HS/Documents/GitHub/Tableau/Homework/과제 2")
####데이터 불러오기만...
cali <- read.csv("california.csv")
shiny::runGitHub("shiny-examples","rstudio",subdir="050-kmeans-example")
shiny::runGitHub("shiny-examples","rstudio",subdir="050-kmeans-example")
####R에 존재하는 다양한 내장함수들...
install.packages("shiny")
install.packages("shiny")
library(shiny)
shiny::runGitHub("shiny-examples","rstudio",subdir="050-kmeans-example")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
par(mae(c(4,4,1,1)))
plot(mpg~hp,
data=subset(mtcars,am==1),
xlim=c(50,450),ylim = c(5,40))
points(mpg ~ hp,col="red",
data = subset(mtcars, am==0))
legend(250,40,c("1","0"),title="am",
col=c("black","red"),pch=c(1,1))
##R 내장함수를 이용한 base graphics
par(mae(c(4,4,1,1)))
plot(mpg~hp,
data=subset(mtcars,am==1),
xlim=c(50,450),ylim = c(5,40))
points(mpg ~ hp,col="red",
data = subset(mtcars, am==0))
legend(250,40,c("1","0"),title="am",
col=c("black","red"),pch=c(1,1))
##ggplot2를 이용한 graphics
ggplot(mtcars,aes(x=hp,
y=mpg,color=factor(am))) + geom_point()
library(ggplot2)
par(mae(c(4,4,1,1)))
plot(mpg~hp,
data=subset(mtcars,am==1),
xlim=c(50,450),ylim = c(5,40))
points(mpg ~ hp,col="red",
data = subset(mtcars, am==0))
legend(250,40,c("1","0"),title="am",
col=c("black","red"),pch=c(1,1))
?mae
??mae
ggplot(mtcars,aes(x=hp,
y=mpg,color=factor(am))) + geom_point()
##R 내장함수를 이용한 base graphics
par(mae(c(4,4,1,1)))
g<- ggplot(data = iris,aes(x=Sepal.Length, y = Sepal.Width))
g
#### scatter plot ####
g + geom_point()
####여기에 미적요소를 더하면 색상이나 크기등이 변하게 됨
##aes요소를 추가라여면 변경하고 싶은 geom요소(도형이나 점 선등)의 괄호안에 "aes(색상,크기등의 원하는 디자인)" 요소를 추가
g + geom_point(aes(color=Species,shape=Species))
## geom 트깅 조절하기 alpha=투명도, size = 크기
g + geom_point(alpha=(1/3), size = 5)
head(cali)
ggplot(cali,aes(x=ocean_proximity))+ geom_bar()
#### box plot - geom_boxplot ####
ggplot(cali, aes(factor(ocean_proximity),median_income)) + geom_boxplot()
####Single Column Multiple rows
ggplot(iris, aes(Sepal.Length, Sepal.Width,color=Species)) +
geom_point() +
facet_grid(.~Species)
ggplot(cali,aes(median_income,total_rooms,color=ocean_proximity)) +
geom_point()+
facet_grid(.~ocean_proximity)
ggplot(cali, aes(Sepal.Length, Sepal.Width,color=Species)) +
geom_point()
ggplot(cali, aes(median_income, total_rooms, color=ocran_proximity)) +
geom_point()
ggplot(cali, aes(median_income, total_rooms, color=ocean_proximity)) +
geom_point()
set("../과제 1/cctv.csv")
setwd("../과제 1/cctv.csv")
setwd("../과제 1/total.csv")
####Quiz2 cctv자료에서 x축을 총인구 y축을 총 범죄 발생수라 하고 scatterplot을 그려보시오
getwd
####Quiz2 cctv자료에서 x축을 총인구 y축을 총 범죄 발생수라 하고 scatterplot을 그려보시오
getwd()
setwd("../")
####Quiz2 cctv자료에서 x축을 총인구 y축을 총 범죄 발생수라 하고 scatterplot을 그려보시오
getwd()
setwd("./과제 1/total.csv")
setwd("./과제 1")
cctv<- read.csv("total.csv")
cctv
ggplot(cali,aes(x=ocean_proximity))+ geom_bar()
#### box plot - geom_boxplot ####
ggplot(cali, aes(factor(ocean_proximity),median_income)) + geom_boxplot() +geom_point()
#### box plot - geom_boxplot ####
ggplot(cali, aes(factor(ocean_proximity),median_income))  +geom_point()
#### box plot - geom_boxplot ####
ggplot(cali, aes(factor(ocean_proximity),median_income)) + geom_boxplot() +geom_point()
#### box plot - geom_boxplot ####
ggplot(cali, aes(x=factor(ocean_proximity),y=median_income)) + geom_boxplot() +geom_point()
ggplot(cali, aes(x=ocean_proximity,y=median_income)) + geom_boxplot() +geom_point()
class(cali$ocean_proximity)
as.character(cali$ocean_proximity)
ggplot(cali, aes(x=ocean_proximity,y=median_income)) + geom_boxplot() +geom_point()
g+geom_point(aplha=(1/3), size=5)
g+geom_point(alpha=(1/3), size=5)
names(cctv)
cctv %>% ggplot(aes=total.pop, y=총발생범죄)
g2<- ggplot(aes=total.pop, y=총발생범죄) + geom_point()
g2<- ggplot(aes(x=total.pop, y=총발생범죄)) + geom_point()
g2<- ggplot(cctv, aes(x=total.pop, y=총발생범죄)) + geom_point()
g2
g2 + geom_point(alpha=(1/2), size=5)
g2<- ggplot(cctv, aes(x=total.pop, y=총발생범죄))
g2 + geom_point(alpha=(1/2), size=5)
ggplot(cali, aes(median_income, total_rooms)) +
geom_point(color=ocean_proximity)
ggplot(cali, aes(median_income, total_rooms)) +
geom_point(color=ocean_proximity)
ggplot(cali, aes(median_income, total_rooms)) +
geom_point(aes(color=ocean_proximity))
ggplot(cali, aes(median_income, total_rooms, color=ocean_proximity)) +
geom_point()
ggplot(cali,aes(x=ocean_proximity))+ geom_bar()
ggplot(cali, aes(x=ocean_proximity, y=median_income)) +geom_bar
ggplot(cali, aes(x=ocean_proximity, y=median_income)) +geom_bar()
facet_grid(.~ocean_proximity)
####Single colum Multiple rows
ggplot(cali, aes(x=median_income, y= median_income, color= ocean_proximity) +
facet_grid(.~ocean_proximity)
ggplot(cali,aes(median_income,total_rooms,color=ocean_proximity)) +
geom_point()+
facet_grid(.~ocean_proximity)
####Single colum Multiple rows
ggplot(cali, aes(x=median_income, y= total_room, color= ocean_proximity) +
####Single colum Multiple rows
ggplot(cali, aes(x=median_income, y= total_rooms, color= ocean_proximity) +
####Single colum Multiple rows
ggplot(cali, aes(x=median_income, y= total_rooms, color= ocean_proximity)) +
geom_point() +
facet_grid(.~ocean_proximity)
ggplot(cali, aes(x=ocean_proximity, y= total_rooms, color= ocean_proximity)) +
geom_point() +
facet_grid(.~ocean_proximity)
names(cali)
ggplot(cali, aes(x=population, y= total_rooms, color= ocean_proximity)) +
geom_point() +
facet_grid(.~ocean_proximity)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
